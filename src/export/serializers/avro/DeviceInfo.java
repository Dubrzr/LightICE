/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package export.serializers.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeviceInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4781860190916335512L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceInfo\",\"namespace\":\"export.serializers.avro\",\"fields\":[{\"name\":\"site\",\"type\":\"string\"},{\"name\":\"service\",\"type\":\"string\"},{\"name\":\"sector\",\"type\":\"string\"},{\"name\":\"room\",\"type\":\"string\"},{\"name\":\"alias\",\"type\":\"string\"},{\"name\":\"serialPort\",\"type\":\"string\"},{\"name\":\"driver\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeviceInfo> ENCODER =
      new BinaryMessageEncoder<DeviceInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeviceInfo> DECODER =
      new BinaryMessageDecoder<DeviceInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DeviceInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DeviceInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeviceInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DeviceInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DeviceInfo from a ByteBuffer. */
  public static DeviceInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence site;
  @Deprecated public java.lang.CharSequence service;
  @Deprecated public java.lang.CharSequence sector;
  @Deprecated public java.lang.CharSequence room;
  @Deprecated public java.lang.CharSequence alias;
  @Deprecated public java.lang.CharSequence serialPort;
  @Deprecated public java.lang.CharSequence driver;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceInfo() {}

  /**
   * All-args constructor.
   * @param site The new value for site
   * @param service The new value for service
   * @param sector The new value for sector
   * @param room The new value for room
   * @param alias The new value for alias
   * @param serialPort The new value for serialPort
   * @param driver The new value for driver
   */
  public DeviceInfo(java.lang.CharSequence site, java.lang.CharSequence service, java.lang.CharSequence sector, java.lang.CharSequence room, java.lang.CharSequence alias, java.lang.CharSequence serialPort, java.lang.CharSequence driver) {
    this.site = site;
    this.service = service;
    this.sector = sector;
    this.room = room;
    this.alias = alias;
    this.serialPort = serialPort;
    this.driver = driver;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return site;
    case 1: return service;
    case 2: return sector;
    case 3: return room;
    case 4: return alias;
    case 5: return serialPort;
    case 6: return driver;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: site = (java.lang.CharSequence)value$; break;
    case 1: service = (java.lang.CharSequence)value$; break;
    case 2: sector = (java.lang.CharSequence)value$; break;
    case 3: room = (java.lang.CharSequence)value$; break;
    case 4: alias = (java.lang.CharSequence)value$; break;
    case 5: serialPort = (java.lang.CharSequence)value$; break;
    case 6: driver = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'site' field.
   * @return The value of the 'site' field.
   */
  public java.lang.CharSequence getSite() {
    return site;
  }

  /**
   * Sets the value of the 'site' field.
   * @param value the value to set.
   */
  public void setSite(java.lang.CharSequence value) {
    this.site = value;
  }

  /**
   * Gets the value of the 'service' field.
   * @return The value of the 'service' field.
   */
  public java.lang.CharSequence getService() {
    return service;
  }

  /**
   * Sets the value of the 'service' field.
   * @param value the value to set.
   */
  public void setService(java.lang.CharSequence value) {
    this.service = value;
  }

  /**
   * Gets the value of the 'sector' field.
   * @return The value of the 'sector' field.
   */
  public java.lang.CharSequence getSector() {
    return sector;
  }

  /**
   * Sets the value of the 'sector' field.
   * @param value the value to set.
   */
  public void setSector(java.lang.CharSequence value) {
    this.sector = value;
  }

  /**
   * Gets the value of the 'room' field.
   * @return The value of the 'room' field.
   */
  public java.lang.CharSequence getRoom() {
    return room;
  }

  /**
   * Sets the value of the 'room' field.
   * @param value the value to set.
   */
  public void setRoom(java.lang.CharSequence value) {
    this.room = value;
  }

  /**
   * Gets the value of the 'alias' field.
   * @return The value of the 'alias' field.
   */
  public java.lang.CharSequence getAlias() {
    return alias;
  }

  /**
   * Sets the value of the 'alias' field.
   * @param value the value to set.
   */
  public void setAlias(java.lang.CharSequence value) {
    this.alias = value;
  }

  /**
   * Gets the value of the 'serialPort' field.
   * @return The value of the 'serialPort' field.
   */
  public java.lang.CharSequence getSerialPort() {
    return serialPort;
  }

  /**
   * Sets the value of the 'serialPort' field.
   * @param value the value to set.
   */
  public void setSerialPort(java.lang.CharSequence value) {
    this.serialPort = value;
  }

  /**
   * Gets the value of the 'driver' field.
   * @return The value of the 'driver' field.
   */
  public java.lang.CharSequence getDriver() {
    return driver;
  }

  /**
   * Sets the value of the 'driver' field.
   * @param value the value to set.
   */
  public void setDriver(java.lang.CharSequence value) {
    this.driver = value;
  }

  /**
   * Creates a new DeviceInfo RecordBuilder.
   * @return A new DeviceInfo RecordBuilder
   */
  public static export.serializers.avro.DeviceInfo.Builder newBuilder() {
    return new export.serializers.avro.DeviceInfo.Builder();
  }

  /**
   * Creates a new DeviceInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceInfo RecordBuilder
   */
  public static export.serializers.avro.DeviceInfo.Builder newBuilder(export.serializers.avro.DeviceInfo.Builder other) {
    return new export.serializers.avro.DeviceInfo.Builder(other);
  }

  /**
   * Creates a new DeviceInfo RecordBuilder by copying an existing DeviceInfo instance.
   * @param other The existing instance to copy.
   * @return A new DeviceInfo RecordBuilder
   */
  public static export.serializers.avro.DeviceInfo.Builder newBuilder(export.serializers.avro.DeviceInfo other) {
    return new export.serializers.avro.DeviceInfo.Builder(other);
  }

  /**
   * RecordBuilder for DeviceInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceInfo>
    implements org.apache.avro.data.RecordBuilder<DeviceInfo> {

    private java.lang.CharSequence site;
    private java.lang.CharSequence service;
    private java.lang.CharSequence sector;
    private java.lang.CharSequence room;
    private java.lang.CharSequence alias;
    private java.lang.CharSequence serialPort;
    private java.lang.CharSequence driver;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(export.serializers.avro.DeviceInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.site)) {
        this.site = data().deepCopy(fields()[0].schema(), other.site);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.service)) {
        this.service = data().deepCopy(fields()[1].schema(), other.service);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sector)) {
        this.sector = data().deepCopy(fields()[2].schema(), other.sector);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.room)) {
        this.room = data().deepCopy(fields()[3].schema(), other.room);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alias)) {
        this.alias = data().deepCopy(fields()[4].schema(), other.alias);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serialPort)) {
        this.serialPort = data().deepCopy(fields()[5].schema(), other.serialPort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.driver)) {
        this.driver = data().deepCopy(fields()[6].schema(), other.driver);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(export.serializers.avro.DeviceInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.site)) {
        this.site = data().deepCopy(fields()[0].schema(), other.site);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.service)) {
        this.service = data().deepCopy(fields()[1].schema(), other.service);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sector)) {
        this.sector = data().deepCopy(fields()[2].schema(), other.sector);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.room)) {
        this.room = data().deepCopy(fields()[3].schema(), other.room);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alias)) {
        this.alias = data().deepCopy(fields()[4].schema(), other.alias);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.serialPort)) {
        this.serialPort = data().deepCopy(fields()[5].schema(), other.serialPort);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.driver)) {
        this.driver = data().deepCopy(fields()[6].schema(), other.driver);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'site' field.
      * @return The value.
      */
    public java.lang.CharSequence getSite() {
      return site;
    }

    /**
      * Sets the value of the 'site' field.
      * @param value The value of 'site'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setSite(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.site = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'site' field has been set.
      * @return True if the 'site' field has been set, false otherwise.
      */
    public boolean hasSite() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'site' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearSite() {
      site = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'service' field.
      * @return The value.
      */
    public java.lang.CharSequence getService() {
      return service;
    }

    /**
      * Sets the value of the 'service' field.
      * @param value The value of 'service'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setService(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.service = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'service' field has been set.
      * @return True if the 'service' field has been set, false otherwise.
      */
    public boolean hasService() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'service' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearService() {
      service = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sector' field.
      * @return The value.
      */
    public java.lang.CharSequence getSector() {
      return sector;
    }

    /**
      * Sets the value of the 'sector' field.
      * @param value The value of 'sector'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setSector(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sector = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sector' field has been set.
      * @return True if the 'sector' field has been set, false otherwise.
      */
    public boolean hasSector() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sector' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearSector() {
      sector = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'room' field.
      * @return The value.
      */
    public java.lang.CharSequence getRoom() {
      return room;
    }

    /**
      * Sets the value of the 'room' field.
      * @param value The value of 'room'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setRoom(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.room = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'room' field has been set.
      * @return True if the 'room' field has been set, false otherwise.
      */
    public boolean hasRoom() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'room' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearRoom() {
      room = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'alias' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlias() {
      return alias;
    }

    /**
      * Sets the value of the 'alias' field.
      * @param value The value of 'alias'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setAlias(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.alias = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'alias' field has been set.
      * @return True if the 'alias' field has been set, false otherwise.
      */
    public boolean hasAlias() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'alias' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearAlias() {
      alias = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'serialPort' field.
      * @return The value.
      */
    public java.lang.CharSequence getSerialPort() {
      return serialPort;
    }

    /**
      * Sets the value of the 'serialPort' field.
      * @param value The value of 'serialPort'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setSerialPort(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.serialPort = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'serialPort' field has been set.
      * @return True if the 'serialPort' field has been set, false otherwise.
      */
    public boolean hasSerialPort() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'serialPort' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearSerialPort() {
      serialPort = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'driver' field.
      * @return The value.
      */
    public java.lang.CharSequence getDriver() {
      return driver;
    }

    /**
      * Sets the value of the 'driver' field.
      * @param value The value of 'driver'.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder setDriver(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.driver = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'driver' field has been set.
      * @return True if the 'driver' field has been set, false otherwise.
      */
    public boolean hasDriver() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'driver' field.
      * @return This builder.
      */
    public export.serializers.avro.DeviceInfo.Builder clearDriver() {
      driver = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeviceInfo build() {
      try {
        DeviceInfo record = new DeviceInfo();
        record.site = fieldSetFlags()[0] ? this.site : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.service = fieldSetFlags()[1] ? this.service : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sector = fieldSetFlags()[2] ? this.sector : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.room = fieldSetFlags()[3] ? this.room : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.alias = fieldSetFlags()[4] ? this.alias : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.serialPort = fieldSetFlags()[5] ? this.serialPort : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.driver = fieldSetFlags()[6] ? this.driver : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeviceInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeviceInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeviceInfo>
    READER$ = (org.apache.avro.io.DatumReader<DeviceInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
