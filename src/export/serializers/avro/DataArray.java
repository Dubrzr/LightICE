/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package export.serializers.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataArray extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5046716880032630097L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataArray\",\"namespace\":\"export.serializers.avro\",\"fields\":[{\"name\":\"frequency\",\"type\":\"float\"},{\"name\":\"rosettaCode\",\"type\":\"string\"},{\"name\":\"metricId\",\"type\":\"string\"},{\"name\":\"vendorMetricId\",\"type\":\"string\"},{\"name\":\"instanceId\",\"type\":\"int\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"timestampsNano\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataArray> ENCODER =
      new BinaryMessageEncoder<DataArray>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataArray> DECODER =
      new BinaryMessageDecoder<DataArray>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DataArray> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DataArray> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DataArray>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DataArray to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DataArray from a ByteBuffer. */
  public static DataArray fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public float frequency;
  @Deprecated public java.lang.CharSequence rosettaCode;
  @Deprecated public java.lang.CharSequence metricId;
  @Deprecated public java.lang.CharSequence vendorMetricId;
  @Deprecated public int instanceId;
  @Deprecated public java.util.List<java.lang.Float> values;
  @Deprecated public java.util.List<java.lang.Long> timestampsNano;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataArray() {}

  /**
   * All-args constructor.
   * @param frequency The new value for frequency
   * @param rosettaCode The new value for rosettaCode
   * @param metricId The new value for metricId
   * @param vendorMetricId The new value for vendorMetricId
   * @param instanceId The new value for instanceId
   * @param values The new value for values
   * @param timestampsNano The new value for timestampsNano
   */
  public DataArray(java.lang.Float frequency, java.lang.CharSequence rosettaCode, java.lang.CharSequence metricId, java.lang.CharSequence vendorMetricId, java.lang.Integer instanceId, java.util.List<java.lang.Float> values, java.util.List<java.lang.Long> timestampsNano) {
    this.frequency = frequency;
    this.rosettaCode = rosettaCode;
    this.metricId = metricId;
    this.vendorMetricId = vendorMetricId;
    this.instanceId = instanceId;
    this.values = values;
    this.timestampsNano = timestampsNano;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return frequency;
    case 1: return rosettaCode;
    case 2: return metricId;
    case 3: return vendorMetricId;
    case 4: return instanceId;
    case 5: return values;
    case 6: return timestampsNano;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: frequency = (java.lang.Float)value$; break;
    case 1: rosettaCode = (java.lang.CharSequence)value$; break;
    case 2: metricId = (java.lang.CharSequence)value$; break;
    case 3: vendorMetricId = (java.lang.CharSequence)value$; break;
    case 4: instanceId = (java.lang.Integer)value$; break;
    case 5: values = (java.util.List<java.lang.Float>)value$; break;
    case 6: timestampsNano = (java.util.List<java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return The value of the 'frequency' field.
   */
  public java.lang.Float getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * @param value the value to set.
   */
  public void setFrequency(java.lang.Float value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'rosettaCode' field.
   * @return The value of the 'rosettaCode' field.
   */
  public java.lang.CharSequence getRosettaCode() {
    return rosettaCode;
  }

  /**
   * Sets the value of the 'rosettaCode' field.
   * @param value the value to set.
   */
  public void setRosettaCode(java.lang.CharSequence value) {
    this.rosettaCode = value;
  }

  /**
   * Gets the value of the 'metricId' field.
   * @return The value of the 'metricId' field.
   */
  public java.lang.CharSequence getMetricId() {
    return metricId;
  }

  /**
   * Sets the value of the 'metricId' field.
   * @param value the value to set.
   */
  public void setMetricId(java.lang.CharSequence value) {
    this.metricId = value;
  }

  /**
   * Gets the value of the 'vendorMetricId' field.
   * @return The value of the 'vendorMetricId' field.
   */
  public java.lang.CharSequence getVendorMetricId() {
    return vendorMetricId;
  }

  /**
   * Sets the value of the 'vendorMetricId' field.
   * @param value the value to set.
   */
  public void setVendorMetricId(java.lang.CharSequence value) {
    this.vendorMetricId = value;
  }

  /**
   * Gets the value of the 'instanceId' field.
   * @return The value of the 'instanceId' field.
   */
  public java.lang.Integer getInstanceId() {
    return instanceId;
  }

  /**
   * Sets the value of the 'instanceId' field.
   * @param value the value to set.
   */
  public void setInstanceId(java.lang.Integer value) {
    this.instanceId = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return The value of the 'values' field.
   */
  public java.util.List<java.lang.Float> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.List<java.lang.Float> value) {
    this.values = value;
  }

  /**
   * Gets the value of the 'timestampsNano' field.
   * @return The value of the 'timestampsNano' field.
   */
  public java.util.List<java.lang.Long> getTimestampsNano() {
    return timestampsNano;
  }

  /**
   * Sets the value of the 'timestampsNano' field.
   * @param value the value to set.
   */
  public void setTimestampsNano(java.util.List<java.lang.Long> value) {
    this.timestampsNano = value;
  }

  /**
   * Creates a new DataArray RecordBuilder.
   * @return A new DataArray RecordBuilder
   */
  public static export.serializers.avro.DataArray.Builder newBuilder() {
    return new export.serializers.avro.DataArray.Builder();
  }

  /**
   * Creates a new DataArray RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataArray RecordBuilder
   */
  public static export.serializers.avro.DataArray.Builder newBuilder(export.serializers.avro.DataArray.Builder other) {
    return new export.serializers.avro.DataArray.Builder(other);
  }

  /**
   * Creates a new DataArray RecordBuilder by copying an existing DataArray instance.
   * @param other The existing instance to copy.
   * @return A new DataArray RecordBuilder
   */
  public static export.serializers.avro.DataArray.Builder newBuilder(export.serializers.avro.DataArray other) {
    return new export.serializers.avro.DataArray.Builder(other);
  }

  /**
   * RecordBuilder for DataArray instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataArray>
    implements org.apache.avro.data.RecordBuilder<DataArray> {

    private float frequency;
    private java.lang.CharSequence rosettaCode;
    private java.lang.CharSequence metricId;
    private java.lang.CharSequence vendorMetricId;
    private int instanceId;
    private java.util.List<java.lang.Float> values;
    private java.util.List<java.lang.Long> timestampsNano;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(export.serializers.avro.DataArray.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.frequency)) {
        this.frequency = data().deepCopy(fields()[0].schema(), other.frequency);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rosettaCode)) {
        this.rosettaCode = data().deepCopy(fields()[1].schema(), other.rosettaCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metricId)) {
        this.metricId = data().deepCopy(fields()[2].schema(), other.metricId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vendorMetricId)) {
        this.vendorMetricId = data().deepCopy(fields()[3].schema(), other.vendorMetricId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[4].schema(), other.instanceId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.values)) {
        this.values = data().deepCopy(fields()[5].schema(), other.values);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestampsNano)) {
        this.timestampsNano = data().deepCopy(fields()[6].schema(), other.timestampsNano);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataArray instance
     * @param other The existing instance to copy.
     */
    private Builder(export.serializers.avro.DataArray other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.frequency)) {
        this.frequency = data().deepCopy(fields()[0].schema(), other.frequency);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rosettaCode)) {
        this.rosettaCode = data().deepCopy(fields()[1].schema(), other.rosettaCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metricId)) {
        this.metricId = data().deepCopy(fields()[2].schema(), other.metricId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vendorMetricId)) {
        this.vendorMetricId = data().deepCopy(fields()[3].schema(), other.vendorMetricId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[4].schema(), other.instanceId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.values)) {
        this.values = data().deepCopy(fields()[5].schema(), other.values);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestampsNano)) {
        this.timestampsNano = data().deepCopy(fields()[6].schema(), other.timestampsNano);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'frequency' field.
      * @return The value.
      */
    public java.lang.Float getFrequency() {
      return frequency;
    }

    /**
      * Sets the value of the 'frequency' field.
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setFrequency(float value) {
      validate(fields()[0], value);
      this.frequency = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'frequency' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearFrequency() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rosettaCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getRosettaCode() {
      return rosettaCode;
    }

    /**
      * Sets the value of the 'rosettaCode' field.
      * @param value The value of 'rosettaCode'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setRosettaCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.rosettaCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rosettaCode' field has been set.
      * @return True if the 'rosettaCode' field has been set, false otherwise.
      */
    public boolean hasRosettaCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'rosettaCode' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearRosettaCode() {
      rosettaCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'metricId' field.
      * @return The value.
      */
    public java.lang.CharSequence getMetricId() {
      return metricId;
    }

    /**
      * Sets the value of the 'metricId' field.
      * @param value The value of 'metricId'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setMetricId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.metricId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'metricId' field has been set.
      * @return True if the 'metricId' field has been set, false otherwise.
      */
    public boolean hasMetricId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'metricId' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearMetricId() {
      metricId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vendorMetricId' field.
      * @return The value.
      */
    public java.lang.CharSequence getVendorMetricId() {
      return vendorMetricId;
    }

    /**
      * Sets the value of the 'vendorMetricId' field.
      * @param value The value of 'vendorMetricId'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setVendorMetricId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.vendorMetricId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vendorMetricId' field has been set.
      * @return True if the 'vendorMetricId' field has been set, false otherwise.
      */
    public boolean hasVendorMetricId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vendorMetricId' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearVendorMetricId() {
      vendorMetricId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'instanceId' field.
      * @return The value.
      */
    public java.lang.Integer getInstanceId() {
      return instanceId;
    }

    /**
      * Sets the value of the 'instanceId' field.
      * @param value The value of 'instanceId'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setInstanceId(int value) {
      validate(fields()[4], value);
      this.instanceId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'instanceId' field has been set.
      * @return True if the 'instanceId' field has been set, false otherwise.
      */
    public boolean hasInstanceId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'instanceId' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearInstanceId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getValues() {
      return values;
    }

    /**
      * Sets the value of the 'values' field.
      * @param value The value of 'values'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setValues(java.util.List<java.lang.Float> value) {
      validate(fields()[5], value);
      this.values = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'values' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearValues() {
      values = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestampsNano' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getTimestampsNano() {
      return timestampsNano;
    }

    /**
      * Sets the value of the 'timestampsNano' field.
      * @param value The value of 'timestampsNano'.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder setTimestampsNano(java.util.List<java.lang.Long> value) {
      validate(fields()[6], value);
      this.timestampsNano = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestampsNano' field has been set.
      * @return True if the 'timestampsNano' field has been set, false otherwise.
      */
    public boolean hasTimestampsNano() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestampsNano' field.
      * @return This builder.
      */
    public export.serializers.avro.DataArray.Builder clearTimestampsNano() {
      timestampsNano = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataArray build() {
      try {
        DataArray record = new DataArray();
        record.frequency = fieldSetFlags()[0] ? this.frequency : (java.lang.Float) defaultValue(fields()[0]);
        record.rosettaCode = fieldSetFlags()[1] ? this.rosettaCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.metricId = fieldSetFlags()[2] ? this.metricId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.vendorMetricId = fieldSetFlags()[3] ? this.vendorMetricId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.instanceId = fieldSetFlags()[4] ? this.instanceId : (java.lang.Integer) defaultValue(fields()[4]);
        record.values = fieldSetFlags()[5] ? this.values : (java.util.List<java.lang.Float>) defaultValue(fields()[5]);
        record.timestampsNano = fieldSetFlags()[6] ? this.timestampsNano : (java.util.List<java.lang.Long>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataArray>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataArray>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataArray>
    READER$ = (org.apache.avro.io.DatumReader<DataArray>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
